USE DataWarehouse


--1.  DATABASE EXPORATION

-- Explore All Objects in the Database

SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore All Columns in the Database

SELECT * FROM INFORMATION_SCHEMA.COLUMNS

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'

-- 2.  EXPLORATORY DATA ANALYSIS - DIMENSIONS EXPLORATION

--Identifying the unique values (or categories) in each dimension.

--Recognizing how data might be grouped or segmented,
--which is useful for later analysis.

-- Explore All Countries our customers come from

SELECT DISTINCT 
	country 
FROM gold.dim_customers 
ORDER BY country;

-- Explore All Categories "The major Division"

SELECT DISTINCT 
	category, 
	subcategory, 
	product_name 
FROM gold.dim_products
ORDER BY category, subcategory, product_name;

-- 3.  EXPLORATORY DATA ANALYSIS - DATE EXPLORATION

-- Identify the earliest and latest dates (boundaries). Understand the scope of data and the timespan

-- Find the date of the first and last order

SELECT 
	MIN(order_date) AS first_order_date,
	MAX(order_date) AS last_order_date,
	DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) AS order_range_years
FROM gold.fact_sales

-- Find the youngest and the oldest customer

SELECT
	MIN(birthdate) AS oldest_birthdate,
	DATEDIFF(YEAR, MIN(birthdate), GETDATE()) AS oldest_age,
	MAX(birthdate) AS youngest_birthdate,
	DATEDIFF(YEAR, MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers


-- 4.  EXPLORATORY DATA ANALYSIS - MEASURES EXPLORATION

--Find the Total Sales

SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales

-- Find how many items are sold
SELECT SUM(quantity) AS total_quantity FROM gold.fact_sales

-- Find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales

--Find the Total number of Orders
SELECT COUNT(order_number) AS total_order FROM gold.fact_sales
SELECT COUNT(DISTINCT order_number) AS total_order FROM gold.fact_sales


--Find the total number of products
SELECT COUNT(product_name) AS total_products FROM gold.dim_products
SELECT COUNT(DISTINCT product_name) AS total_products FROM gold.dim_products

--Find the total number of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers


--Find the total number of customers that has placed an order
SELECT COUNT(customer_key) AS total_customers FROM gold.fact_sales
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.fact_sales

-- Generate Report that show all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', SUM(quantity) AS total_quantity FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) AS avg_price FROM gold.fact_sales
UNION
SELECT 'Total Nr. Orders', COUNT(DISTINCT order_number) AS total_order FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Products', COUNT(DISTINCT product_name) AS total_products FROM gold.dim_products
UNION ALL
SELECT 'Total Nr. Customers', COUNT(customer_key) AS total_customers FROM gold.dim_customers


-- 5. MAGNITUDE -- compare the measure values by categories. It helps us understand the importance of different categories
-- Measure By Dimension

--Find total customers by countries

SELECT
	country,
	COUNT (customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers desc;


-- Find total customers by gender
SELECT
	gender,
	COUNT (customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers desc;

-- Find total products by category
SELECT
	category,
	COUNT (product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products desc;

-- What is the average costs in each category?

SELECT
	category,
	AVG(COST) AS avg_costs
FROM gold.dim_products
GROUP BY category
ORDER BY avg_costs desc;

-- What is the total revenue generated for each category?

SELECT
	p.category,
	SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
	ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue desc


-- Find total revenue is generated by each customer

SELECT
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
	ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name
ORDER BY total_revenue desc

-- What is the distribution of sold items across countries?

SELECT
	c.country,
	SUM(f.quantity) total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
	ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items desc;

-- 6. RANKING - Order the values of dimenstions by measure. Top N performers & Bottom N Performers

-- Which 5 Products generate the highest revenue

-- Simple Ranking
SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY product_name
ORDER BY total_revenue desc

---Complex but flexible ranking using window function
SELECT *
FROM (
	SELECT 
		p.product_name,
		SUM(f.sales_amount) total_revenue,
		RANK() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
		ON p.product_key = f.product_key
	GROUP BY product_name
) AS ranked_products
WHERE rank_products <= 5

/*
SELECT *
FROM (
	SELECT 
		p.product_name,
		SUM(f.sales_amount) total_revenue,
		rank() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
		FROM gold.fact_sales f
		LEFT JOIN gold.dim_products p
		ON p.product_key = f.product_key
		GROUP BY product_name) t
WHERE rank_products <= 5
*/

-- What are the 5 worst-performing products in terms of sales?

SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
	ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue asc;

-- Find the top 10 customers who have generated the highest revenue

SELECT TOP 10
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
	ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name
ORDER BY total_revenue desc;

-- The first 3 customers with the fewest orders placed

SELECT TOP 3
	c.customer_key,
	c.first_name,
	c.last_name,
COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
	ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name
ORDER BY total_orders
